generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ----------------------------- Customer Order Product ----------------------------- */
model customer_order_product {
  id              String  @id @default(uuid())
  customerOrderId String
  productId       String
  quantity        Int

  customerOrder   customer_order @relation(fields: [customerOrderId], references: [id])
  product         product        @relation(fields: [productId], references: [id])

  @@index([customerOrderId])
  @@index([productId])
}

/* ----------------------------- Category ----------------------------- */
model category {
  id        String    @id @default(uuid())
  name      String    @unique // ✅ removed duplicate map name
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  product   product[]
}

/* ----------------------------- Customer Order ----------------------------- */
model customer_order {
  id          String    @id @default(uuid())
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime? @default(now())
  status      String
  city        String
  country     String
  orderNotice String?
  total       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  products    customer_order_product[]
}

/* ----------------------------- Merchant ----------------------------- */
model merchant {
  id          String    @id @default(uuid())
  name        String
  description String?
  email       String?
  phone       String?
  address     String?
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  product     product[]
}

/* ----------------------------- Notification ----------------------------- */
model notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  message   String    @db.Text
  type      notification_type
  isRead    Boolean   @default(false)
  priority  notification_priority @default(NORMAL)
  metadata  String?   @db.LongText
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([createdAt])
  @@index([userId])
  @@index([userId, isRead])
  @@index([userId, type])

}

/* ----------------------------- Product ----------------------------- */
model product {
  id             String           @id @default(uuid())
  slug           String           @unique
  title          String
  mainImage      String
  price          Int              @default(0)
  rating         Int              @default(0)
  description    String
  manufacturer   String
  inStock        Int              @default(1)
  categoryId     String
  merchantId     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  customerOrders customer_order_product[]
  category       category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  merchant       merchant         @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  wishlist       wishlist[]
  images         image[]          // ✅ removed named relation (simplified)
  videos         product_video[]  // ✅ removed named relation (simplified)

  @@index([categoryId])
  @@index([merchantId])
}

/* ----------------------------- Image ----------------------------- */
model image {
  imageID   String  @id @default(uuid())
  productID String
  image     String
  altText   String? @default("")
  order     Int     @default(0)

  product   product @relation(fields: [productID], references: [id], onDelete: Cascade)

  @@index([productID])
}

/* ----------------------------- Product Video ----------------------------- */
model product_video {
  id        String  @id @default(uuid())
  productId String
  videoUrl  String
  title     String? @default("")
  thumbnail String? @default("")
  order     Int     @default(0)

  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

/* ----------------------------- User ----------------------------- */
model user {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  role      String?   @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  notification notification[]
  wishlist     wishlist[]
  wallet       wallet?
}

/* ----------------------------- Wishlist ----------------------------- */
model wishlist {
  id        String  @id @default(uuid())
  productId String
  userId    String

  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

/* ----------------------------- Enums ----------------------------- */
enum notification_type {
  ORDER_UPDATE
  PAYMENT_STATUS
  PROMOTION
  SYSTEM_ALERT
}

enum notification_priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

/* ----------------------------- Wallet ----------------------------- */
model wallet {
  id        String    @id @default(uuid())
  userId    String    @unique
  balance   Int       @default(0)
  currency  String    @default("INR")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  user         user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions walletTransaction[]
}

/* ----------------------------- Wallet Transaction ----------------------------- */
model walletTransaction {
  id          String    @id @default(uuid())
  walletId    String
  amount      Int
  type        transaction_type
  status      transaction_status @default(PENDING)
  description String?
  reference   String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  wallet      wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

/* ----------------------------- Transaction Enums ----------------------------- */
enum transaction_type {
  CREDIT
  DEBIT
  REFUND
  PAYMENT
  TRANSFER
}

enum transaction_status {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
